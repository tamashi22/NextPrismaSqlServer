generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
} 

model budget {
  id            Int    @id(map: "PK_budget") @default(autoincrement())
  budget_amount Float?
  percent       Int?   @db.TinyInt
  bonus         Float? @db.Money
}

model employee {
  id                    Int                     @id(map: "PK_employee") @default(autoincrement())
  full_name             String?                 @db.NVarChar(50)
  job_title             Int?
  selery                Int?
  adress                String?                 @db.NVarChar(50)
  phone_number          Decimal?                @db.Decimal(18, 0)
  Job_title             Job_title?              @relation(fields: [job_title], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_employee_Job_title")
  purchase_raw_material purchase_raw_material[]
  salary                salary[]
  sale_of_products      sale_of_products[]
}

model finished_product {
  id               Int                @id(map: "PK_finished_product") @default(autoincrement())
  name             String?            @db.NVarChar(50)
  unit             Int?
  amount           Float?
  sum              Float?
  Unit             Unit?              @relation(fields: [unit], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_finished_product_Unit")
  ingredients      ingredients[]
  sale_of_products sale_of_products[]
}

model ingredients {
  id                                                  Int               @id(map: "PK_ingredients") @default(autoincrement())
  product_id                                          Int?
  raw_material                                        Int?              @unique
  amount                                              Float?
  finished_product                                    finished_product? @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_ingredients_finished_product")
  raw_material_ingredients_raw_materialToraw_material raw_material?     @relation("ingredients_raw_materialToraw_material", fields: [raw_material], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_ingredients_raw_material")
}

model Job_title {
  id        Int        @id(map: "PK_Job_title") @default(autoincrement())
  job_title String?    @db.NVarChar(50)
  employee  employee[]
}

model production {
  id          Int       @id(map: "PK_production") @default(autoincrement())
  product_id  Int?
  amount      Float?
  Date        DateTime? @db.Date
  employee_id Int?
}

model purchase_raw_material {
  id                                                            Int           @id(map: "PK_purchase_raw_material_1") @default(autoincrement())
  raw_material                                                  Int?
  amount                                                        Float?
  sum                                                           Float?
  date                                                          DateTime?     @db.Date
  employee_id                                                   Int?
  employee                                                      employee?     @relation(fields: [employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_purchase_raw_material_employee1")
  raw_material_purchase_raw_material_raw_materialToraw_material raw_material? @relation("purchase_raw_material_raw_materialToraw_material", fields: [raw_material], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_purchase_raw_material_raw_material1")
}

model raw_material {
  id                                                                     Int                     @id(map: "PK_raw_material") @default(autoincrement())
  name                                                                   String?                 @db.NVarChar(50)
  unit                                                                   Int?
  amount                                                                 Float?
  sum                                                                    Float?
  ingredients_ingredients_raw_materialToraw_material                     ingredients?            @relation("ingredients_raw_materialToraw_material")
  purchase_raw_material_purchase_raw_material_raw_materialToraw_material purchase_raw_material[] @relation("purchase_raw_material_raw_materialToraw_material")
  Unit                                                                   Unit?                   @relation(fields: [unit], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_raw_material_Unit")
}

model sale_of_products {
  id               Int               @id(map: "PK_sale_of_products") @default(autoincrement())
  product_id       Int?
  amount           Float?
  sum              Float?
  Date             DateTime?         @db.Date
  employee_id      Int?
  employee         employee?         @relation(fields: [employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_sale_of_products_employee")
  finished_product finished_product? @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_sale_of_products_finished_product")
}

model sysdiagrams {
  name         String @db.NVarChar(128)
  principal_id Int
  diagram_id   Int    @id(map: "PK__sysdiagr__C2B05B6127E46959") @default(autoincrement())
  version      Int?
  definition   Bytes?

  @@unique([principal_id, name], map: "UK_principal_name")
}

model Unit {
  id               Int                @id(map: "PK_Unit") @default(autoincrement())
  name             String?            @db.NVarChar(50)
  finished_product finished_product[]
  raw_material     raw_material[]
}

model salary {
  id                 Int       @id(map: "PK__salary__3213E83FAC431E17") @default(autoincrement())
  employee_id        Int?
  sale_counts        Int?
  purchase_counts    Int?
  production_counts  Int?
  allActivity_counts Int?
  year               Int?
  month              Int?
  amount             Float?
  is_paid            Boolean?
  employee           employee? @relation(fields: [employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK__salary__employee__4C6B5938")
}

model Credit {
  id            Int       @id(map: "PK__Credit__3213E83F9F52BC4F") @default(autoincrement())
  amount        Float
  interest_rate Float
  penalty_rate  Float
  duration      Int
  start_date    DateTime  @db.DateTime
  Payment       Payment[]
}

model Payment {
  id           Int      @id(map: "PK__Payment__3213E83F62C7CA06") @default(autoincrement())
  credit_id    Int
  payment_date DateTime @db.DateTime
  principal    Float
  interest     Float
  penalty      Float
  Credit       Credit   @relation(fields: [credit_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_Payment_Credit")
}
